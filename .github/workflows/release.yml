name: Release

on:
  push:
    tags:
      - "v*"

permissions:
  contents: write
  packages: write

jobs:
  validate:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get_version.outputs.version }}
      tag_version: ${{ steps.get_version.outputs.tag_version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Get version from tag
        id: get_version
        run: |
          TAG_VERSION=${GITHUB_REF#refs/tags/v}
          echo "tag_version=$TAG_VERSION" >> $GITHUB_OUTPUT
          echo "version=v$TAG_VERSION" >> $GITHUB_OUTPUT

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: pip install uv

      - name: Install dependencies
        run: uv pip install -e ".[dev]" --system

      - name: Validate version consistency
        run: |
          PROJECT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          TAG_VERSION="${{ steps.get_version.outputs.tag_version }}"
          echo "Project version: $PROJECT_VERSION"
          echo "Tag version: $TAG_VERSION"
          if [ "$PROJECT_VERSION" != "$TAG_VERSION" ]; then
            echo "Error: Version in pyproject.toml ($PROJECT_VERSION) does not match tag version ($TAG_VERSION)"
            exit 1
          fi

  quality-checks:
    name: Quality Checks
    runs-on: ubuntu-latest
    needs: validate
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install uv
        run: pip install uv

      - name: Install dependencies
        run: uv pip install -e ".[dev]" --system

      - name: Cache pre-commit
        uses: actions/cache@v4
        with:
          path: ~/.cache/pre-commit
          key: pre-commit-${{ runner.os }}-${{ hashFiles('.pre-commit-config.yaml') }}

      - name: Run pre-commit
        run: pre-commit run --all-files

      - name: Run tests
        run: pytest tests/ -v --cov --cov-report=xml

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          fail_ci_if_error: false

  build-python:
    name: Build Python Package
    runs-on: ubuntu-latest
    needs: [validate, quality-checks]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install build dependencies
        run: |
          pip install build twine

      - name: Build package
        run: python -m build

      - name: Check package
        run: twine check dist/*

      - name: Upload Python artifacts
        uses: actions/upload-artifact@v4
        with:
          name: python-package
          path: dist/
          retention-days: 90

  build-container:
    name: Build Container Image
    runs-on: ubuntu-latest
    needs: [validate, quality-checks]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=ref,event=tag
            type=raw,value=latest
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}

      - name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Containerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate, build-python, build-container]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Python artifacts
        uses: actions/download-artifact@v4
        with:
          name: python-package
          path: dist/

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag for changelog generation
          PREV_TAG=$(git tag --sort=-version:refname | head -2 | tail -1)
          if [ -z "$PREV_TAG" ] || [ "$PREV_TAG" = "${{ needs.validate.outputs.version }}" ]; then
            # First release or only one tag
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            # Generate changelog since previous tag
            CHANGELOG=$(git log $PREV_TAG..${{ needs.validate.outputs.version }} --pretty=format:"- %s (%h)" --reverse)
          fi
          
          # Write changelog to file for multiline support
          cat > CHANGELOG.md << 'EOF'
          ## What's Changed
          
          $CHANGELOG
          
          ## Container Images
          
          - `ghcr.io/${{ github.repository }}:${{ needs.validate.outputs.tag_version }}`
          - `ghcr.io/${{ github.repository }}:latest`
          
          ## Installation
          
          ### Python Package
          ```bash
          pip install openshift-partner-labs-mcp-server==${{ needs.validate.outputs.tag_version }}
          ```
          
          ### Container
          ```bash
          podman run ghcr.io/${{ github.repository }}:${{ needs.validate.outputs.tag_version }}
          ```
          EOF

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate.outputs.version }}
          name: Release ${{ needs.validate.outputs.version }}
          body_path: CHANGELOG.md
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: ${{ contains(needs.validate.outputs.version, '-') || startsWith(needs.validate.outputs.tag_version, '0.') }}
          generate_release_notes: true